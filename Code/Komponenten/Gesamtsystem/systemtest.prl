

MODULE(system);
	SYSTEM;
		stdout: StdOut;
		lichtrechen: RPiDigitalIn(13,8,'u');
		leftstepmotor_out: RPiDigitalOut(19, 4);
		rightstepmotor_out: RPiDigitalOut(23, 4);
		httpSocket: TcpIpServer(80);

	PROBLEM;
		SPC stdout DATION OUT SYSTEM ALPHIC;
		DCL termout DATION OUT ALPHIC DIM(*, 80) FORWARD STREAM CREATED(stdout);		

		SPC lichtrechen DATION IN SYSTEM BASIC BIT(8) GLOBAL;
		DCL lr DATION IN BASIC BIT(8) CREATED(lichtrechen);
		
		SPC leftstepmotor_out DATION OUT SYSTEM BASIC BIT(4) GLOBAL;
		DCL lmotor DATION OUT BASIC BIT(4) CREATED (leftstepmotor_out);
		SPC rightstepmotor_out DATION OUT SYSTEM BASIC BIT(4) GLOBAL;
		DCL rmotor DATION OUT BASIC BIT(4) CREATED (rightstepmotor_out);

		SPC httpSocket DATION INOUT SYSTEM ALL;
		DCL usHttpSocket DATION INOUT ALPHIC DIM(*,200) FORWARD STREAM CREATED(httpSocket);  
    
    DCL (lr_signal) FLOAT;
    DCL (lm_speed, rm_speed) FLOAT;
    
    DCL (lr_sema, lm_sema, rm_sema, d1, d2) SEMA PRESET(1,1,1,0,0);
    DCL (lm_bolt, rm_bolt) BOLT;
    
    DCL (lspeed, rspeed) FLOAT INIT(1,1);

	main: TASK MAIN;
		lr_signal := 0;
		lm_speed := 1;
		rm_speed := 1;
		
		OPEN termout;
		OPEN lmotor;
		OPEN rmotor;
		ACTIVATE readlr;
		ACTIVATE drive;
		ACTIVATE webinterface;
		SUSPEND;
		CLOSE lmotor;
		CLOSE rmotor;
		CLOSE termout;
	
	END;
		
  drive: TASK;
     DCL lrin FLOAT;
     DCL in FLOAT;
     
     REPEAT
     REQUEST lr_sema;
     in:= -2 * lr_signal;
     RELEASE lr_sema;
     
     IF in < 0 THEN
      lspeed := 1;
      rspeed := -1 * in;
     FIN;
     
     IF in > 0 THEN
      lspeed = in;
      rspeed = 1;
     FIN;
     
     IF in == 0 THEN
        lspeed = 1;
        rspeed = 1;
     FIN;
     
     RESERVE lm_bolt;
     lm_speed = lspeed;
     FREE lm_bolt;
     
     RESERVE rm_bolt;
     rm_speed = rspeed;
<<<<<<< HEAD
     RELEASE rm_sema;
=======
     FREE rm_bolt;
     
>>>>>>> f5213641cd749f643d3b36980e48608271b2789c
     ACTIVATE driveleft;
     ACTIVATE driveright;
     REQUEST d1, d2;
     AFTER 0.001 SEC RESUME;
     END;
  END;
  
  driveleft: TASK;
    DCL time DUR INIT(0.02 SEC);
    DCL steps FIXED INIT(1);
    DCL speed FLOAT;

    ENTER lm_bolt;
    speed := lm_speed;
<<<<<<< HEAD
    RELEASE lm_sema;
    time := (1 / speed) * time;
    steps := ROUND(speed * steps);
=======
    LEAVE lm_bolt;
    time := (1 / speed) * default;
>>>>>>> f5213641cd749f643d3b36980e48608271b2789c

    PUT 'linker Motor: ', speed TO termout BY A, F(6), SKIP;
    CALL step(0, steps, 1, time);
    RELEASE d1;
  END;
  
  driveright: TASK;
    DCL time DUR INIT(0.02 SEC);
    DCL steps FIXED INIT(1);
    DCL speed FLOAT;

    ENTER rm_bolt;
    speed := rm_speed;
<<<<<<< HEAD
    RELEASE rm_sema;
    time := (1 / speed) * time;
    steps := ROUND(speed * steps);
=======
    LEAVE rm_bolt;
    time := (1 / speed) * default;
>>>>>>> f5213641cd749f643d3b36980e48608271b2789c

    PUT 'rechter Motor: ', speed TO termout BY A, F(6), SKIP;

    CALL step(1, steps, 1, time);
    RELEASE d2;
  END;

  
  
	readlr: TASK;
		DCL bits BIT(8);
		DCL timeinterval DUR;
		DCL out FLOAT;
		DCL count FIXED;
		OPEN lr;
		timeinterval := 0.005 SEC;
		REPEAT
			out := 0;
			count := 0;
			TAKE bits FROM lr;

			!PUT bits, bits TO terminal BY B4(2), X, B1(8), SKIP;
			IF bits.BIT(1) == '1'B
			THEN
				out := out + 4;
				count := count +1;
			FIN ;
			IF bits.BIT(2) == '1'B
			THEN
				out := out + 3;
				count := count +1;
			FIN ;
			IF bits.BIT(3) == '1'B
			THEN
				out := out + 2;
				count := count +1;
			FIN ;
			IF bits.BIT(4) == '1'B
			THEN
				out := out + 1;
				count := count +1;			
			FIN ;
			IF bits.BIT(5) == '1'B
			THEN
				out := out - 1;
				count := count +1;
			FIN ;
			IF bits.BIT(6) == '1'B
			THEN
				out := out - 2;
				count := count +1;
			FIN ;
			IF bits.BIT(7) == '1'B
			THEN
				out := out - 3;
				count := count +1;
			FIN ;
			IF bits.BIT(8) == '1'B			
			THEN
				out := out - 4;
				count := count +1;
			FIN ;
			IF count /= 0
			THEN
				out := out / count;
			FIN ;
      REQUEST lr_sema;
			lr_signal := out;
      RELEASE lr_sema;
			AFTER timeinterval RESUME;
		END;
		CLOSE lr;
	END;


	step: PROC(motorindex FIXED, steps FIXED, dir FIXED, time DUR);
	  DCL (a, b ) BIT(4) INIT('1010'B1, '1001'B1);
	  DCL (c,d) BIT(4);
	  c := '0101'B1;
	  d := '0110'B1;
	  IF motorindex == 0 THEN
		IF dir == 0 THEN
		   TO steps REPEAT
			 SEND a TO lmotor;
			 AFTER time RESUME;

			 SEND b TO lmotor;
			 AFTER time RESUME;

			 SEND c TO lmotor;
			 AFTER time RESUME;

			 SEND d TO lmotor;
			 AFTER time RESUME;
		   END;
		FIN;

		IF dir == 1 THEN
		   TO steps REPEAT
			 SEND d TO lmotor;
			 AFTER time RESUME;

			 SEND c TO lmotor;
			 AFTER time RESUME;

			 SEND b TO lmotor;
			 AFTER time RESUME;

			 SEND a TO lmotor;
			 AFTER time RESUME;
		   END;
		FIN;
	  FIN;
	  IF motorindex == 1 THEN
		IF dir == 0 THEN
		   TO steps REPEAT
			 SEND a TO rmotor;
			 AFTER time RESUME;

			 SEND b TO rmotor;
			 AFTER time RESUME;

			 SEND c TO rmotor;
			 AFTER time RESUME;

			 SEND d TO rmotor;
			 AFTER time RESUME;
		   END;
		FIN;

		IF dir == 1 THEN
		   TO steps REPEAT
			 SEND d TO rmotor;
			 AFTER time RESUME;

			 SEND c TO rmotor;
			 AFTER time RESUME;

			 SEND b TO rmotor;
			 AFTER time RESUME;

			 SEND a TO rmotor;
			 AFTER time RESUME;
		   END;
		FIN;
	  FIN;
	END;






!--------------------------------------------Webinterface------------------------------------------
	webinterface: TASK;
	      DCL request CHAR(70);
	      
	      
	      REPEAT		
		OPEN usHttpSocket;	
   	   	GET request FROM usHttpSocket BY A, SKIP;
		
		PUT 'HTTP/1.1 200 ok' TO usHttpSocket BY A, SKIP;
           	PUT 'Connection: close' TO usHttpSocket BY A, SKIP;
           	PUT 'Context-Type: text/html' TO usHttpSocket BY A, SKIP,SKIP;

		IF request == 'GET /index.html HTTP/1.1' THEN
	   		CALL index;
	   	ELSE IF request == 'GET /info.html HTTP/1.1' THEN
			CALL info;
		ELSE IF request == 'GET /doku.html HTTP/1.1' THEN
			CALL doku;
		ELSE
			CALL error;
		FIN;		
		FIN;
	   	FIN;
		CLOSE usHttpSocket;
	     END;
	END;
	
	
	index: PROC;

		DCL speedl FLOAT;
	  	DCL speedr FLOAT;

		ENTER lm_bolt;
    		speedl := lm_speed;
    		LEAVE lm_bolt;
			
		ENTER rm_bolt;
    		speedr := rm_speed;
		LEAVE rm_bolt;


		PUT '<HTML><HEAD><style>' TO usHttpSocket BY A, SKIP;
		CALL style;
		PUT '</style><meta http-equiv = refresh content = 1; URL = /index.html >' TO usHttpSocket BY A, SKIP;
		PUT '<TITLE>OpenPEARL Projekt</TITLE></HEAD>'TO usHttpSocket BY A, SKIP;
		
		PUT '<BODY><div id = value_div><div class = head_div><h1>Auto</h1></div>' TO usHttpSocket BY A,SKIP;
		PUT '<div id = value_list_div><ul id = value_list>' TO usHttpSocket BY A, SKIP;
		PUT '<li>Geschwindigkeit Lins:', speedl, '</li>'TO usHttpSocket BY A, F(6), A, SKIP;	
		PUT '<li>Geschwindigkeit Rechts:', speedr, '</li>'TO usHttpSocket BY A, F(6), A, SKIP;	
		PUT '</ul></div></div>' TO usHttpSocket BY A, SKIP;
		PUT '<div id = navigation ><div class = head_div ></div>' TO usHttpSocket BY A, SKIP;
		PUT '<div class = nav_div ><p><a href = info.html>Info</a></p><p><a href = doku.html>Doku</a></p></div></div></BODY></HTML>' TO usHttpSocket BY A, SKIP;	
	END;

	info: PROC;
	PUT '<HTML><HEAD><style>' TO usHttpSocket BY A, SKIP;
	CALL style;
		PUT '</style><TITLE>OpenPEARL Projekt</TITLE></HEAD>'TO usHttpSocket BY A, SKIP;
		
		PUT '<BODY><div id = value_div><div class = head_div><h1>Info</h1></div>' TO usHttpSocket BY A,SKIP;
		PUT '<div id = value_list_div> Hier koennte ihre info stehen' TO usHttpSocket BY A, SKIP;
		PUT '</div></div>' TO usHttpSocket BY A, SKIP;
		PUT '<div id = navigation ><div class = head_div ></div>' TO usHttpSocket BY A, SKIP;
		PUT '<div class = nav_div ><p><a href = index.html>Start</a></p><p><a href = doku.html>Doku</a></p></div></div></BODY></HTML>' TO usHttpSocket BY A, SKIP;
	END;

	doku: PROC;
		PUT '<HTML><HEAD><style>' TO usHttpSocket BY A, SKIP;
		CALL style;
		PUT '</style><TITLE>OpenPEARL Projekt</TITLE></HEAD>'TO usHttpSocket BY A, SKIP;
		
		PUT '<BODY><div id = value_div><div class = head_div><h1>Doku</h1></div>' TO usHttpSocket BY A,SKIP;
		PUT '<div id = value_list_div>Hier koennte ihre Doku stehen' TO usHttpSocket BY A, SKIP;
		PUT '</div></div>' TO usHttpSocket BY A, SKIP;
		PUT '<div id = navigation ><div class = head_div ></div>' TO usHttpSocket BY A, SKIP;
		PUT '<div class = nav_div ><p><a href = index.html>Start</a></p><p><a href = info.html>Info</a></p></div></div></BODY></HTML>' TO usHttpSocket BY A, SKIP;
	END;

	error: PROC;
		PUT '<HTML><HEAD><style>' TO usHttpSocket BY A, SKIP;
		CALL style;
		PUT '</style><TITLE>OpenPEARL Projekt</TITLE></HEAD>'TO usHttpSocket BY A, SKIP;

		PUT '<BODY><div id = value_div><div class = head_div><h1>Error 404</h1></div><div id = value_list_div style = text-align:center; ><ul id = value_list><li>Site not found</li></ul></div></div><div id = navigation ><div class = head_div ></div></BODY></HTML>' TO usHttpSocket BY A, SKIP;
	END;


	style: PROC;
		PUT 'html{margin: 0; font-family: sans-serif;}' TO usHttpSocket BY A, SKIP;
		PUT 'body{margin: 0; background-color: #eaecbd;}' TO usHttpSocket BY A, SKIP;
		PUT 'h1{margin: 0;}' TO usHttpSocket BY A, SKIP;
		PUT '#navigation{position: absolute; overflow: auto; left: 0; top: 0; width: 13%; height: 100%;}' TO usHttpSocket BY A, SKIP;
		PUT '.head_div{position: relative ; left: 0; top: 0; width: 100%; height: 3.78em; line-height: 3.7em; margin: 0; background-color: #008040; color: white; text-align: center;}' TO usHttpSocket BY A, SKIP;
		PUT 'value_div{position: absolute; right: 0; bottom: 0; width: 87%; height: 100%;}' TO usHttpSocket BY A, SKIP;
		PUT '.nav_div{font-size: 1.5em; margin-left: 1em; border-right: solid gray;}' TO usHttpSocket BY A, SKIP;
		PUT 'a{text-decoration: none; color: gray;}' TO usHttpSocket BY A, SKIP;
		PUT 'a:hover{text-decoration: underline;}' TO usHttpSocket BY A, SKIP;
		PUT '#value_list_div{overflow: auto; width: 60%; height: 80%; margin-left: 15%;}' TO usHttpSocket BY A, SKIP;
		PUT '#value_list{text-decoration: none; list-style-type: none;}' TO usHttpSocket BY A,SKIP;
	END;
	


MODEND;
